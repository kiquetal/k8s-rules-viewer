name: Manual Operations Workflow

# This workflow will only run when manually triggered using the GitHub UI or API
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      build_type:
        description: 'Type of build to perform'
        required: true
        default: 'default'
        type: choice
        options:
          - default
          - release
          - debug
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_title:
        description: 'Release title (e.g., "Initial Release")'
        required: true
        type: string
        default: 'New Release'
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: false
        type: boolean

# Add permissions needed to create releases
permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Go version from go.mod
        id: go-version
        run: |
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+(\.[0-9]+)?' go.mod | awk '{print $2}')
          echo "GO_VERSION=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.GO_VERSION }}
          cache: true

      - name: Display build information
        run: |
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Build Type: ${{ github.event.inputs.build_type }}"
          echo "Go Version: ${{ steps.go-version.outputs.GO_VERSION }}"

      - name: Verify module configuration
        run: go mod verify

      - name: Build application
        run: |
          BUILD_FLAGS=""
          if [ "${{ github.event.inputs.build_type }}" = "release" ]; then
            BUILD_FLAGS="-ldflags '-s -w'"
          elif [ "${{ github.event.inputs.build_type }}" = "debug" ]; then
            BUILD_FLAGS="-gcflags 'all=-N -l'"
          fi
          
          eval "go build $BUILD_FLAGS -o k8s-rules-viewer ./cmd/main.go"
          
          # Create platform-specific binaries if needed
          if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
            # Linux
            GOOS=linux GOARCH=amd64 eval "go build $BUILD_FLAGS -o k8s-rules-viewer-linux-amd64 ./cmd/main.go"
            # macOS
            GOOS=darwin GOARCH=amd64 eval "go build $BUILD_FLAGS -o k8s-rules-viewer-darwin-amd64 ./cmd/main.go"
            GOOS=darwin GOARCH=arm64 eval "go build $BUILD_FLAGS -o k8s-rules-viewer-darwin-arm64 ./cmd/main.go"
            # Windows
            GOOS=windows GOARCH=amd64 eval "go build $BUILD_FLAGS -o k8s-rules-viewer-windows-amd64.exe ./cmd/main.go"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-rules-viewer-${{ github.event.inputs.environment }}-${{ github.event.inputs.build_type }}
          path: k8s-rules-viewer
          retention-days: 7

      # Validate version format before creating release
      - name: Validate version format
        if: ${{ github.event.inputs.create_release == 'true' }}
        id: validate_version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Add v prefix if not already there
          if [[ $VERSION != v* ]]; then
            VERSION="v$VERSION"
            echo "FORMATTED_VERSION=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "FORMATTED_VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "Using version tag: $VERSION"

      # Create GitHub Release and upload assets
      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.validate_version.outputs.FORMATTED_VERSION }}
          name: "${{ github.event.inputs.release_title }} ${{ steps.validate_version.outputs.FORMATTED_VERSION }}"
          draft: false
          prerelease: ${{ github.event.inputs.environment != 'production' }}
          generate_release_notes: true
          files: |
            k8s-rules-viewer-linux-amd64
            k8s-rules-viewer-darwin-amd64
            k8s-rules-viewer-darwin-arm64
            k8s-rules-viewer-windows-amd64.exe
          body: |
            ## k8s-rules-viewer ${{ steps.validate_version.outputs.FORMATTED_VERSION }}
            
            **Environment:** ${{ github.event.inputs.environment }}
            **Build Type:** ${{ github.event.inputs.build_type }}
            
            ### Installation
            Download the appropriate binary for your platform and make it executable.
            
            ```
            chmod +x k8s-rules-viewer-*
            ```
            
            ### Features
            - Terminal UI for viewing Kubernetes resources
            - Deployment, Service, and Pod info visualization
            - Rules compliance checking
            - Krakend config validation
            - Cross-platform support (Linux, macOS, Windows)

`
